#!/bin/bash

# Test runner script for EstateSaleFinder.ai backend
# This script runs all tests and provides clear feedback

set -e  # Exit on error

echo "======================================"
echo "EstateSaleFinder.ai - Backend Tests"
echo "======================================"
echo ""

# Check if Go is installed
if ! command -v go &> /dev/null; then
    echo "‚ùå ERROR: Go is not installed"
    echo "   Please install Go 1.21 or later"
    echo "   Visit: https://golang.org/doc/install"
    exit 1
fi

echo "‚úì Go version: $(go version)"
echo ""

# Check if we're in the right directory
if [ ! -f "go.mod" ]; then
    echo "‚ùå ERROR: Not in backend directory"
    echo "   Please run this script from the backend directory"
    exit 1
fi

echo "======================================"
echo "Step 1: Check if code compiles"
echo "======================================"
if go build ./...; then
    echo "‚úì Code compiles successfully"
else
    echo "‚ùå Compilation failed"
    exit 1
fi
echo ""

echo "======================================"
echo "Step 2: Run unit tests (no DB needed)"
echo "======================================"
echo ""
if go test -v ./internal/domain/listing -run TestListing; then
    echo ""
    echo "‚úì Unit tests passed"
else
    echo ""
    echo "‚ùå Unit tests failed"
    exit 1
fi
echo ""

echo "======================================"
echo "Step 3: Check for DATABASE_URL"
echo "======================================"
if [ -z "$DATABASE_URL" ]; then
    echo "‚ö† WARNING: DATABASE_URL not set"
    echo "   Integration tests will be skipped"
    echo ""
    echo "   To run integration tests, set DATABASE_URL:"
    echo "   export DATABASE_URL=\"postgres://user:pass@localhost:5432/dbname?sslmode=disable\""
    echo ""
    echo "======================================"
    echo "Test Summary"
    echo "======================================"
    echo "‚úì Compilation: PASSED"
    echo "‚úì Unit Tests: PASSED"
    echo "‚ö† Integration Tests: SKIPPED (no DATABASE_URL)"
    exit 0
fi

echo "‚úì DATABASE_URL is set"
echo ""

echo "======================================"
echo "Step 4: Run integration tests"
echo "======================================"
echo ""

echo "--- Listing Integration Tests ---"
if go test -v ./internal/domain/listing -run TestListingIntegrationSuite; then
    echo ""
    echo "‚úì Listing integration tests passed"
else
    echo ""
    echo "‚ùå Listing integration tests failed"
    exit 1
fi
echo ""

echo "--- Scraper Integration Tests ---"
if go test -v ./internal/infrastructure/scraper -run TestScraperIntegrationSuite; then
    echo ""
    echo "‚úì Scraper integration tests passed"
else
    echo ""
    echo "‚ùå Scraper integration tests failed"
    exit 1
fi
echo ""

echo "======================================"
echo "Step 5: Run all tests with coverage"
echo "======================================"
echo ""
if go test -cover ./...; then
    echo ""
    echo "‚úì All tests passed with coverage"
else
    echo ""
    echo "‚ùå Some tests failed"
    exit 1
fi
echo ""

echo "======================================"
echo "Test Summary - ALL PASSED! ‚úì"
echo "======================================"
echo "‚úì Compilation: PASSED"
echo "‚úì Unit Tests: PASSED"
echo "‚úì Listing Integration Tests: PASSED"
echo "‚úì Scraper Integration Tests: PASSED"
echo "‚úì Coverage Report: PASSED"
echo ""
echo "üéâ All tests completed successfully!"
echo ""
echo "Refactoring verification: Sale ‚Üí Listing"
echo "‚úì All types renamed correctly"
echo "‚úì All imports updated"
echo "‚úì CRUD operations working"
echo "‚úì Conversions working"
echo "‚úì Filtering and pagination working"
echo ""
